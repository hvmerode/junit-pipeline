# This is the primary pipeline to build and deploy the junit-pipeline.jar

name: $(Date:yyyyMMdd)$(Rev:.r)

trigger: none

variables:
  - group: junit-pipeline-group
  - name: MAVEN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.m2/repository

stages:
  #################################################################################################################
  # STAGE: Validate entry criteria
  # Check whether variables are preconfigured
  #################################################################################################################
  - stage: Validate_entry_criteria
    displayName: 'Validate entry criteria'
    condition: always()
    jobs:
      - job: Validate_entry_criteria
        pool:
          vmImage: 'ubuntu-latest'
        workspace:
          clean: all
        continueOnError: "false"

        steps:
          # Validate whether pipeline variables (stored in Variable Groups) are configured
          # The pipeline stops is a mandatory variable is not configured
          - script: |
              echo 'Variable releaseBuild is not configured'
              exit 1
            displayName: 'Exit if the releaseBuild variable is not configured'
            condition: eq(variables['releaseBuild'], '')

          - script: |
              echo 'Variable releaseVersion is not configured'
              exit 1
            displayName: 'Exit if the releaseVersion variable is not configured'
            condition: eq(variables['releaseVersion'], '')

    #################################################################################################################
    # STAGE: Execute build + Package artifact + Publish artifact
    # Performs Maven snapshot- and release build
    #################################################################################################################
  - stage: Execute_build_publish
    displayName: 'Execute build, Perform unit tests and Package/Publish artifact'
    dependsOn: Validate_entry_criteria
    condition: succeeded()
    jobs:
      - job: Execute_build_publish
        pool:
          vmImage: 'ubuntu-latest'
          demands: maven
        workspace:
          clean: all
        continueOnError: "false"

        steps:
          # Add pipeline caching; force invalidating the cache
          - task: Cache@2
            displayName: 'Cache Maven local repo'
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              path: $(MAVEN_CACHE_FOLDER)

            # Perform Maven 'feature build' if branch is not main
          - task: Maven@3
            condition: ne(variables['releaseBuild'], 'true')
            displayName: 'Build artifacts (feature branch)'
            inputs:
              goals: 'clean package -U'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.11'
              jdkArchitectureOption: 'x64'
              sonarQubeRunAnalysis: false
              options: '-B -DscmBranch=$(Build.SourceBranchName) -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
              testResultsFiles: '**/TEST-*.xml'
              publishJUnitResults: true

            # Tag the pipeline if a release artifact is build
          - script: |
              echo "##vso[build.addbuildtag]$(releaseVersion)"
            condition: and(succeeded(), eq(variables['releaseBuild'], 'true'))
            displayName: 'Tag the pipeline with a version'

            # Publish the artifacts
          - task: CopyFiles@2
            displayName: 'Copy artifacts to the staging directory'
            inputs:
              contents: '**/target/*.jar'
              targetFolder: $(Build.ArtifactStagingDirectory)
              flattenFolders: true
          - task: PublishBuildArtifacts@1
            displayName: 'Publish build artifacts'
            inputs:
              pathToPublish: $(Build.ArtifactStagingDirectory)
              artifactName: myapp-artifacts

    #################################################################################################################
    # STAGE: Analyze code
    # This stage runs in parallel with the Execute_build_publish stage to speed up the pipeline execution time.
    # It makes use of SonarCloud to validate the Java code amd Whispers to check on secrets in the respo.
    #################################################################################################################
  - stage: Analyze_code
    displayName: 'Analyze code'
    dependsOn: Validate_entry_criteria
    condition: succeeded()
    jobs:
      # Perform SonarCloud analysis
      - job: SonarCloud
        pool:
          vmImage: 'ubuntu-latest'
          demands: maven
        workspace:
          clean: all
        continueOnError: "false"

        steps:
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: SonarCloudGithub
              organization: 'io-github-hvmerode'
              scannerMode: 'Other'
              extraProperties: |
                # Additional properties that will be passed to the scanner,
                # Put one key=value per line, example:
                # sonar.exclusions=**/*.bin
                sonar.projectKey=hvmerode_junit-pipeline
                sonar.projectName=junit-pipeline

            # Add pipeline caching; force invalidating the cache each month
          - task: Cache@2
            displayName: 'Cache Maven local repo'
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              path: $(MAVEN_CACHE_FOLDER)

            # Perform Sonar Cloud check
          - task: Maven@3
#            condition: ne(variables['Build.SourceBranchName'], 'main')
            displayName: 'Sonar Cloud build'
            inputs:
              goals: 'clean verify -U sonar:sonar -DskipTests'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.11'
              jdkArchitectureOption: 'x64'
              sonarQubeRunAnalysis: true
              options: '-B -DscmBranch=$(Build.SourceBranchName) -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
              publishJUnitResults: false

          - task: SonarCloudPublish@1
            inputs:
              pollingTimeoutSec: '300'

          - task: sonarcloud-buildbreaker@2
            displayName: 'Sonar Cloud build breaker'
            inputs:
              SonarCloud: 'SonarCloudGithub'
              organization: 'io-github-hvmerode'
