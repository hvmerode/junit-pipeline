# Copyright (c) Henry van Merode.
# Licensed under the MIT License.

# This is the primary pipeline to build and deploy the junit-pipeline.jar

name: $(Date:yyyyMMdd)$(Rev:.r)

trigger: none

variables:
  - group: junit-pipeline-group
  - name: MAVEN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.m2/repository

stages:
  #################################################################################################################
  # STAGE: Validate entry criteria
  # Check whether variables are preconfigured
  #################################################################################################################
  - stage: Validate_entry_criteria
    displayName: 'Validate entry criteria'
    condition: always()
    jobs:
      - job: Validate_entry_criteria
        pool:
          vmImage: 'ubuntu-latest'
        workspace:
          clean: all
        continueOnError: "false"

        steps:
          # Validate whether pipeline variables (stored in Variable Groups) are configured
          # The pipeline stops is a mandatory variable is not configured
          - script: |
              echo 'Variable releaseBuild is not configured'
              exit 1
            displayName: 'Exit if the releaseBuild variable is not configured'
            condition: eq(variables['releaseBuild'], '')

    #################################################################################################################
    # STAGE: Execute build + Package artifact + Publish artifact
    # Performs Maven snapshot- and release build
    #################################################################################################################
  - stage: Execute_build_publish
    displayName: 'Execute build, and Package/Publish artifact'
    dependsOn: Validate_entry_criteria
    condition: succeeded()
    jobs:
      - job: Execute_build_publish
        pool:
          vmImage: 'ubuntu-latest'
          demands: maven
        workspace:
          clean: all
        continueOnError: "false"

        steps:
          # Add pipeline caching; force invalidating the cache
          - task: Cache@2
            displayName: 'Cache Maven local repo'
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              path: $(MAVEN_CACHE_FOLDER)

            # Perform Maven build
          - task: Maven@3
            displayName: 'Build artifacts'
            inputs:
              goals: 'clean package -U'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.11'
              jdkArchitectureOption: 'x64'
              sonarQubeRunAnalysis: false
              options: '-B -DscmBranch=$(Build.SourceBranchName) -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
              testResultsFiles: '**/TEST-*.xml'
              publishJUnitResults: true

          - script: |
              cd ${SYSTEM_DEFAULTWORKINGDIRECTORY}

              # Retrieve version from pom.xml
              sudo apt-get install -y libxml2-utils
              v=`xmllint --xpath '/*[local-name()="project"]/*[local-name()="version"]/text()' ./pom.xml`
              echo "Version from pom.xml: $v"
              echo "##vso[task.setvariable variable=version;]$v"
            displayName: 'Derive version from pom.xml'

          - script: |
              # Create a keypair to sign the jars
              sudo apt-get --assume-yes install gnupg
              gpg --full-gen-key --batch <(echo "Key-Type: 1"; \
                             echo "Key-Length: 4096"; \
                             echo "Subkey-Type: 1"; \
                             echo "Subkey-Length: 4096"; \
                             echo "Expire-Date: 0"; \
                             echo "Name-Real: Root Superuser"; \
                             echo "Name-Email: hvmerode@io.github.com"; \
                             echo "%no-protection"; )
              gpg --list-secret-keys

              cd ${SYSTEM_DEFAULTWORKINGDIRECTORY}

              # Export keys
              gpg --output public.pgp --armor --export hvmerode@io.github.com
              gpg --output private.pgp --armor --export-secret-key hvmerode@io.github.com
              keyIds=`gpg --list-packets public.pgp | awk '/keyid:/{ print $2 }'`
              firstKeyId=${keyIds%$'\n'*}
              echo "First key-id: $firstKeyId"
              secondKeyId=${keyIds##*$'\n'}
              echo "Second key-id: $secondKeyId"

              echo "Export keyId and sub-KeyId to keyserver"
              gpg --export-secret-keys -o hvmerode@io.github.com
              gpg --send-keys --keyserver keyserver.ubuntu.com "$firstKeyId"
              gpg --send-keys --keyserver keyserver.ubuntu.com "$secondKeyId"

              # Create jar file with sources
              jar cf junit-pipeline-$(version)-sources.jar ./*

              # Create .pom file and copy other files to root
              cp ./pom.xml ./junit-pipeline-$(version).pom
              mv ./target/junit-pipeline-$(version).jar junit-pipeline-$(version).jar

              # Create Java doc
              mvn javadoc:jar
              mv ./target/junit-pipeline-$(version)-javadoc.jar junit-pipeline-$(version)-javadoc.jar

              # Create md5 and sha1 hashes of pom file
              md5=($(md5sum junit-pipeline-$(version).pom))
              echo $md5 > junit-pipeline-$(version).pom.md5
              sha1=($(sha1sum junit-pipeline-$(version).pom))
              echo $sha1 > junit-pipeline-$(version).pom.sha1

              # Create md5 and sha1 hashes of library
              md5=($(md5sum junit-pipeline-$(version).jar))
              echo $md5 > junit-pipeline-$(version).jar.md5
              sha1=($(sha1sum junit-pipeline-$(version).jar))
              echo $sha1 > junit-pipeline-$(version).jar.sha1

              # Create md5 and sha1 hashes of sources
              md5=($(md5sum junit-pipeline-$(version)-sources.jar))
              echo $md5 > junit-pipeline-$(version)-sources.jar.md5
              sha1=($(sha1sum junit-pipeline-$(version)-sources.jar))
              echo $sha1 > junit-pipeline-$(version)-sources.jar.sha1

              # Create md5 and sha1 hashes of javadoc  
              md5=($(md5sum junit-pipeline-$(version)-javadoc.jar))
              echo $md5 > junit-pipeline-$(version)-javadoc.jar.md5
              sha1=($(sha1sum junit-pipeline-$(version)-javadoc.jar))
              echo $sha1 > junit-pipeline-$(version)-javadoc.jar.sha1
              
              # Create GnuPG signature
              gpg -ab --no-tty junit-pipeline-$(version).pom
              gpg -ab --no-tty junit-pipeline-$(version).jar
              gpg -ab --no-tty junit-pipeline-$(version)-sources.jar
              gpg -ab --no-tty junit-pipeline-$(version)-javadoc.jar

              # Create a java bundle
              jar -cvf junit-pipeline-$(version)-bundle.jar \
              junit-pipeline-$(version).pom \
              junit-pipeline-$(version).pom.md5 \
              junit-pipeline-$(version).pom.sha1 \
              junit-pipeline-$(version).pom.asc \
              junit-pipeline-$(version).jar \
              junit-pipeline-$(version).jar.md5 \
              junit-pipeline-$(version).jar.sha1 \
              junit-pipeline-$(version).jar.asc \
              junit-pipeline-$(version)-sources.jar \
              junit-pipeline-$(version)-sources.jar.md5 \
              junit-pipeline-$(version)-sources.jar.sha1 \
              junit-pipeline-$(version)-sources.jar.asc \
              junit-pipeline-$(version)-javadoc.jar \
              junit-pipeline-$(version)-javadoc.jar.md5 \
              junit-pipeline-$(version)-javadoc.jar.sha1 \
              junit-pipeline-$(version)-javadoc.jar.asc
            displayName: 'Generate artifacts needed for Maven central'

            # Tag the pipeline if a release artifact is build
          - script: |
              echo "##vso[build.addbuildtag]$(version)"
            condition: and(succeeded(), eq(variables['releaseBuild'], 'true'))
            displayName: 'Tag the pipeline with a version'

            # Publish the artifacts
          - task: CopyFiles@2
            displayName: 'Copy artifacts to the staging directory'
            inputs:
              sourceFolder: $(System.DefaultWorkingDirectory)
              contents: '**/*.jar'
              targetFolder: $(Build.ArtifactStagingDirectory)
              flattenFolders: true
          - task: CopyFiles@2
            displayName: 'Copy artifacts to the staging directory'
            inputs:
              sourceFolder: $(System.DefaultWorkingDirectory)
              contents: '**/*.md5'
              targetFolder: $(Build.ArtifactStagingDirectory)
              flattenFolders: true
          - task: CopyFiles@2
            displayName: 'Copy artifacts to the staging directory'
            inputs:
              sourceFolder: $(System.DefaultWorkingDirectory)
              contents: '**/*.sha1'
              targetFolder: $(Build.ArtifactStagingDirectory)
              flattenFolders: true
          - task: CopyFiles@2
            displayName: 'Copy artifacts to the staging directory'
            inputs:
              sourceFolder: $(System.DefaultWorkingDirectory)
              contents: '**/*.asc'
              targetFolder: $(Build.ArtifactStagingDirectory)
              flattenFolders: true
          - task: CopyFiles@2
            displayName: 'Copy artifacts to the staging directory'
            inputs:
              sourceFolder: $(System.DefaultWorkingDirectory)
              contents: '**/*.pgp'
              targetFolder: $(Build.ArtifactStagingDirectory)
              flattenFolders: true
          - task: PublishBuildArtifacts@1
            displayName: 'Publish build artifacts'
            inputs:
              pathToPublish: $(Build.ArtifactStagingDirectory)
              artifactName: artifacts

    #################################################################################################################
    # STAGE: Analyze code
    # This stage runs in parallel with the Execute_build_publish stage to speed up the pipeline execution time.
    # It makes use of SonarCloud to validate the Java code amd Whispers to check on secrets in the respo.
    #################################################################################################################
  - stage: Analyze_code
    displayName: 'Analyze code'
    dependsOn: Validate_entry_criteria
    condition: succeeded()
    jobs:
      # Perform SonarCloud analysis
      - job: SonarCloud
        pool:
          vmImage: 'ubuntu-latest'
          demands: maven
        workspace:
          clean: all
        continueOnError: "false"

        steps:
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: SonarCloudGithub
              organization: 'io-github-hvmerode'
              scannerMode: 'Other'
              extraProperties: |
                # Additional properties that will be passed to the scanner,
                # Put one key=value per line, example:
                # sonar.exclusions=**/*.bin
                sonar.projectKey=hvmerode_junit-pipeline
                sonar.projectName=junit-pipeline

                # For now, suppres 'Code Coverage' and 'Duplications'
                sonar.coverage.exclusions=**\*.*
                sonar.cpd.exclusions=**\*.*

            # Add pipeline caching; force invalidating the cache each month
          - task: Cache@2
            displayName: 'Cache Maven local repo'
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              path: $(MAVEN_CACHE_FOLDER)

            # Perform Sonar Cloud check
          - task: Maven@3
            #            condition: ne(variables['Build.SourceBranchName'], 'main')
            displayName: 'Sonar Cloud build'
            inputs:
              goals: 'clean verify -U sonar:sonar -DskipTests'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.11'
              jdkArchitectureOption: 'x64'
              sonarQubeRunAnalysis: true
              options: '-B -DscmBranch=$(Build.SourceBranchName) -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
              publishJUnitResults: false

          - task: SonarCloudPublish@1
            inputs:
              pollingTimeoutSec: '300'

          - task: sonarcloud-buildbreaker@2
            displayName: 'Sonar Cloud build breaker'
            inputs:
              SonarCloud: 'SonarCloudGithub'
              organization: 'io-github-hvmerode'